[gd_scene load_steps=7 format=3 uid="uid://crt118532wteg"]

[ext_resource type="Script" path="res://Scripts/InteractionsAndGameElements/dynamic_cam.gd" id="1_sdejc"]
[ext_resource type="Texture2D" uid="uid://1fnj36ywrnnx" path="res://Assets/Player/king-penguin-7795519_640.jpg" id="2_8kuay"]
[ext_resource type="PackedScene" uid="uid://c0i538cetsg2x" path="res://Scenes/UI/healthbar.tscn" id="3_ywxrm"]

[sub_resource type="GDScript" id="GDScript_l0uhj"]
script/source = "### Player.gd

###HELP MEEEEEEEEEEEEEE
extends CharacterBody2D

var PlayerDeath = preload(\"res://Scenes/player_death.tscn\")
var proj = preload(\"res://Scenes/knife.tscn\")
@onready var HealthBar = $CanvasLayer/Healthbar

var last_direction = Vector2.ZERO
var speed = 200	
var weapon_equipped = false
var weapon_cooldown = true
var dash_cooldown = true
var health_amount : int = 5
var accel = 800
var friction = 900
var currency_amt = 10 
var knockback_power = 300
var control_state = true

#checks for weapons
var default_gun = true
var shotgun = false

func is_player():
	return

func _ready():
	HealthBar.init_health(health_amount)


func _physics_process(delta):
	var direction = Vector2.ZERO
	direction.x = Input.get_axis(\"ui_a\", \"ui_d\")
	direction.y = Input.get_axis(\"ui_w\", \"ui_s\")
	direction = direction.normalized()
	
#store latest direction
	if direction != last_direction:
		last_direction = direction
		
	#update direction and velocity
	if(control_state):
		if direction.x != 0:
			velocity.x = direction.x * speed
		else:
			velocity.x = move_toward(velocity.x, 0, speed * delta)
		if direction.y != 0:
			velocity.y = direction.y * speed
		else:
			velocity.y = move_toward(velocity.y, 0, speed * delta)
		

#Dash
	if Input.is_action_just_pressed(\"ui_q\") and dash_cooldown:
		dash_cooldown = false
		var temp = speed
		speed = speed * 4
		await get_tree().create_timer(.2).timeout
		speed = temp
		await get_tree().create_timer(2).timeout
		dash_cooldown = true
	move_and_slide()
	
	#Shooting mechanic
	if Input.is_action_just_pressed(\"e\"):
		print(shotgun)
		if weapon_equipped:
			weapon_equipped = false
		else:
			weapon_equipped = true
	
	var mouse_pos = get_global_mouse_position()
	$Marker2D.look_at(mouse_pos)
	
	#default gun
	if Input.is_action_just_pressed(\"left_mouse\") and weapon_equipped and weapon_cooldown and default_gun and control_state:
		weapon_cooldown = false
		var proj_instance = proj.instantiate()
		proj_instance.rotation = $Marker2D.rotation
		proj_instance.global_position = $Marker2D.global_position
		add_child(proj_instance)
		await get_tree().create_timer(0.4).timeout
		weapon_cooldown = true
	#shotgun
	if Input.is_action_just_pressed(\"left_mouse\") and weapon_equipped and weapon_cooldown and shotgun and control_state:
		weapon_cooldown = false
		var spread_angle = 0.3
		for i in range(3):#number of bullets
			var proj_instance = proj.instantiate()
			proj_instance.rotation = $Marker2D.rotation + (i - 1) * spread_angle
			proj_instance.global_position = $Marker2D.global_position
			add_child(proj_instance)
			await get_tree().create_timer(0.05).timeout
		await get_tree().create_timer(1).timeout
		weapon_cooldown = true
			
	

#functions to swap between shooting type/weapon
func swap_to_shotgun():
	shotgun = true
	default_gun = false


func _on_detection_area_area_entered(area: Area2D) -> void:
	#taking damage
	if area.has_method(\"get_damage_amount_player\") and control_state:
		var node = area as Node
		health_amount = health_amount - node.get_damage_amount_player()
		HealthBar.health = health_amount
		print(\":D\", health_amount)
	
	if area.name == \"Hurt_box\":
		health_amount = health_amount - 1
		HealthBar.health = health_amount
		knockback()

	
	#player dies
	if health_amount <= 0:
		var PlayerDeath_instance = PlayerDeath.instantiate() as Node2D
		PlayerDeath_instance.global_position = global_position
		get_parent().add_child(PlayerDeath_instance)
		
		
func return_currency_amt():
	return currency_amt
	
	
func change_currency_amt(num1: int) -> int:
	currency_amt = currency_amt + num1
	return false


func knockback():
	var knockbackDirection = -velocity.normalized() * knockback_power
	velocity = knockbackDirection
	control_state = false
	await get_tree().create_timer(.5).timeout
	print(\"huzz\")
	control_state = true
	move_and_slide()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_4n4jn"]
size = Vector2(41, 54)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_mgl1n"]
size = Vector2(40, 53)

[node name="Player" type="CharacterBody2D" groups=["player"]]
position = Vector2(-147, -89)
collision_layer = 11
collision_mask = 11
script = SubResource("GDScript_l0uhj")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-6.5, 0)
shape = SubResource("RectangleShape2D_4n4jn")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(1.1, 1.1)
position_smoothing_enabled = true
position_smoothing_speed = 8.0
script = ExtResource("1_sdejc")

[node name="Marker2D" type="Marker2D" parent="."]

[node name="Detection_area" type="Area2D" parent="."]
collision_layer = 3
collision_mask = 7

[node name="CollisionShape2D" type="CollisionShape2D" parent="Detection_area"]
position = Vector2(-6, 0.5)
shape = SubResource("RectangleShape2D_mgl1n")

[node name="Skeleton" type="Node2D" parent="."]

[node name="Sprite2D" type="Sprite2D" parent="Skeleton"]

[node name="Sprite2D2" type="Sprite2D" parent="Skeleton"]

[node name="Sprite2D3" type="Sprite2D" parent="Skeleton"]

[node name="Sprite2D4" type="Sprite2D" parent="Skeleton"]

[node name="Name" type="Label" parent="Skeleton"]
offset_right = 40.0
offset_bottom = 23.0
metadata/_edit_use_anchors_ = true

[node name="King-penguins-7795519640" type="Sprite2D" parent="Skeleton"]
position = Vector2(-6, -1.90735e-06)
scale = Vector2(0.0854167, 0.0854167)
texture = ExtResource("2_8kuay")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Healthbar" parent="CanvasLayer" instance=ExtResource("3_ywxrm")]
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -275.0
offset_top = -56.0
offset_right = -35.0
offset_bottom = -38.0
grow_horizontal = 0
grow_vertical = 0

[connection signal="area_entered" from="Detection_area" to="." method="_on_detection_area_area_entered"]
