[gd_scene load_steps=8 format=3 uid="uid://crt118532wteg"]

[ext_resource type="Script" path="res://Scripts/InteractionsAndGameElements/dynamic_cam.gd" id="1_sdejc"]
[ext_resource type="Texture2D" uid="uid://1fnj36ywrnnx" path="res://Assets/Player/king-penguin-7795519_640.jpg" id="2_8kuay"]
[ext_resource type="PackedScene" uid="uid://c0i538cetsg2x" path="res://Scenes/UI/healthbar.tscn" id="3_ywxrm"]
[ext_resource type="PackedScene" uid="uid://d26by3t5qswud" path="res://Scenes/UI/ability_bar.tscn" id="4_s6ffl"]

[sub_resource type="GDScript" id="GDScript_l0uhj"]
script/source = "### Player.gd

###HELP MEEEEEEEEEEEEEE
extends CharacterBody2D

var PlayerDeath = preload(\"res://Scenes/player_death.tscn\")
var proj = preload(\"res://Scenes/knife.tscn\")
@onready var HealthBar = $CanvasLayer/Healthbar
@onready var ability_bar = $CanvasLayer/ProgressBar
var ability_manager = AbilityManager

var equipped_ability
var projectile_damage: int = 1
var last_direction = Vector2.ZERO
var speed = 250
var weapon_equipped = false
var weapon_cooldown = true
var dash_cooldown = true
var health_amount : int = 15
var accel = 800
var friction = 700
var currency_amt = 10 
var knockback_power = 300
var invincible = false
var control_state = true
var damage_multiplier = 1

#checks for weapons
var default_gun = true
var shotgun = false

func is_player():
	return

func _ready():
	HealthBar.init_health(health_amount)
	PlayerManager.set_player(self)
	ability_manager.player = self
	ability_manager.progress_bar = ability_bar
	equipped_ability = ability_manager.Ability_nums.double_or_nothing

func _physics_process(delta):
	#update direction and velocity
	if(control_state):
		var direction = Vector2.ZERO
		direction.x = Input.get_axis(\"ui_a\", \"ui_d\")
		direction.y = Input.get_axis(\"ui_w\", \"ui_s\")
		direction = direction.normalized()
	#store latest direction
		if direction != last_direction:
			last_direction = direction
		if direction != Vector2.ZERO:
			velocity = velocity.move_toward(direction * speed, accel * delta)
		else:
			velocity = velocity.move_toward(Vector2.ZERO, friction * delta)
	if Input.is_action_just_pressed(\"ui_q\") and dash_cooldown and control_state:
		Dash()
	move_and_slide()
	
	#Shooting mechanic
	if Input.is_action_just_pressed(\"e\"):
		if weapon_equipped:
			weapon_equipped = false
		else:
			weapon_equipped = true
	
	var mouse_pos = get_global_mouse_position()
	$Marker2D.look_at(mouse_pos)
	
	#default gun
	if Input.is_action_just_pressed(\"left_mouse\") and weapon_equipped and weapon_cooldown and default_gun and control_state:
		weapon_cooldown = false
		var proj_instance = proj.instantiate()
		proj_instance.rotation = $Marker2D.rotation
		proj_instance.global_position = $Marker2D.global_position
		proj_instance.set_damage_amount(projectile_damage)
		add_child(proj_instance)
		await get_tree().create_timer(0.4).timeout
		weapon_cooldown = true
	#shotgun
	if Input.is_action_just_pressed(\"left_mouse\") and weapon_equipped and weapon_cooldown and shotgun and control_state:
		weapon_cooldown = false
		var spread_angle = 0.3
		for i in range(3):#number of bullets
			var proj_instance = proj.instantiate()
			proj_instance.rotation = $Marker2D.rotation + (i - 1) * spread_angle
			proj_instance.global_position = $Marker2D.global_position
			proj_instance.set_damage_amount(projectile_damage)
			add_child(proj_instance)
			await get_tree().create_timer(0.05).timeout
		await get_tree().create_timer(1).timeout
		weapon_cooldown = true
	if Input.is_action_just_pressed(\"ability\"):
		if equipped_ability != ability_manager.Ability_nums.none:
			ability_manager.use_ability(equipped_ability)
		else:
			print(\"No ability equipped boy\")

func equip_ability(ability):
	if ability in ability_manager.ability_cooldowns.keys():
		equipped_ability = ability
		print(\"Equipped ability: \", ability_manager.Ability_nums.keys()[ability])
	else:
		print(\"Are you fucking slow\")

#functions to swap between shooting type/weapon
func swap_to_shotgun():
	shotgun = true
	default_gun = false

func Dash():
	print(\"dash\")
	dash_cooldown = false
	
	var accel_temp = accel
	var temp = speed
	var dash_direction = last_direction
	if dash_direction == Vector2.ZERO:
		dash_direction = Vector2.RIGHT.rotated($Marker2D.rotation)
	
	velocity = dash_direction.normalized() * speed * 3  # 3x speed multiplier
	speed *= 3  # Temporary speed boost
	accel = 10000  # Instant acceleration
	# Dash duration
	await get_tree().create_timer(0.1).timeout
	# Reset movement values
	speed = temp
	accel = accel_temp
	friction = friction * 10
	await get_tree().create_timer(0.15).timeout
	friction = friction / 10
	dash_cooldown = true

func _on_detection_area_area_entered(area: Area2D) -> void:
	#taking projectile damage
	if invincible == false:
		if area.has_method(\"get_damage_amount_player\") and control_state:
			var node = area as Node
			health_amount -= node.get_damage_amount_player() * damage_multiplier
			HealthBar.health = health_amount
			print(\":D\", health_amount)
		#taking touching damage
		if area.name == \"Hurt_box\":
			health_amount -= damage_multiplier
			HealthBar.health = health_amount
			knockback(area.global_position)
	#player dies
	if health_amount <= 0:
		control_state = false
		ability_bar.queue_free()
		self.queue_free()
		var PlayerDeath_instance = PlayerDeath.instantiate() as Node2D
		PlayerDeath_instance.global_position = global_position
		get_parent().add_child(PlayerDeath_instance)
		SceneSwitcher.switch_scene(\"res://Scenes/death_screen.tscn\")

func knockback(areaposition):
	if not invincible:
		invincible = true
		areaposition.x += 150
		var knockback_direction = (global_position - areaposition).normalized()
		velocity = knockback_direction * knockback_power
		if abs(knockback_direction.x) < 0.2: 
			knockback_direction.x = 0.2 * sign(knockback_direction.x)
		
		velocity.x = knockback_direction.x * knockback_power
		velocity.y = knockback_direction.y * knockback_power
		
		#adjust y knockback
		if areaposition.y > self.global_position.y:
			velocity.y *= .8
		else:
			velocity.y *= .8
		print(areaposition, position)
		control_state = false
		for n in range(1,10):
			if n == 5:
				control_state = true
			await get_tree().create_timer(.05).timeout
			if last_direction.x + last_direction.y == 0:
				break;
		invincible = false
		control_state = true

#all the returns and changing of number variables and stuff
func return_currency_amt():
	return currency_amt

func change_currency_amt(num1: int) -> int:
	currency_amt = currency_amt + num1
	return false

func return_damage_amt_player():
	return projectile_damage

func change_damage_amt_player(num1: int) -> int:
	projectile_damage = num1
	return false

func return_damage_taken_mult_player():
	return damage_multiplier

func change_damage_taken_mult_player(num1: int) -> int:
	damage_multiplier = num1
	return false
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_4n4jn"]
size = Vector2(41, 54)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_mgl1n"]
size = Vector2(40, 53)

[node name="Player" type="CharacterBody2D" groups=["player"]]
position = Vector2(-147, -89)
collision_layer = 3
collision_mask = 15
script = SubResource("GDScript_l0uhj")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-6.5, 0)
shape = SubResource("RectangleShape2D_4n4jn")

[node name="Camera2D" type="Camera2D" parent="."]
position_smoothing_enabled = true
position_smoothing_speed = 8.0
script = ExtResource("1_sdejc")

[node name="Marker2D" type="Marker2D" parent="."]

[node name="Detection_area" type="Area2D" parent="."]
collision_layer = 3
collision_mask = 7

[node name="CollisionShape2D" type="CollisionShape2D" parent="Detection_area"]
position = Vector2(-6, 0.5)
shape = SubResource("RectangleShape2D_mgl1n")

[node name="Skeleton" type="Node2D" parent="."]

[node name="Sprite2D" type="Sprite2D" parent="Skeleton"]

[node name="Sprite2D2" type="Sprite2D" parent="Skeleton"]

[node name="Sprite2D3" type="Sprite2D" parent="Skeleton"]

[node name="Sprite2D4" type="Sprite2D" parent="Skeleton"]

[node name="Name" type="Label" parent="Skeleton"]
offset_right = 40.0
offset_bottom = 23.0
metadata/_edit_use_anchors_ = true

[node name="King-penguins-7795519640" type="Sprite2D" parent="Skeleton"]
position = Vector2(-6, -1.90735e-06)
scale = Vector2(0.0854167, 0.0854167)
texture = ExtResource("2_8kuay")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Healthbar" parent="CanvasLayer" instance=ExtResource("3_ywxrm")]
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -275.0
offset_top = -56.0
offset_right = -35.0
offset_bottom = -38.0
grow_horizontal = 0
grow_vertical = 0

[node name="ProgressBar" parent="CanvasLayer" instance=ExtResource("4_s6ffl")]
offset_left = 1020.0
offset_top = 426.0
offset_right = 1118.0
offset_bottom = 568.0

[connection signal="area_entered" from="Detection_area" to="." method="_on_detection_area_area_entered"]
